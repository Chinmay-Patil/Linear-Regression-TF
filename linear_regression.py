# -*- coding: utf-8 -*-
"""Linear Regression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/160iqz1HhRSU2dEbiJzbNC0HmpYx5FTIh
"""

!pip install -q sklearn

# Commented out IPython magic to ensure Python compatibility.
# %tensorflow_version 2.x

from __future__ import  absolute_import,division,print_function,unicode_literals

import numpy as np  #Multidimensional Calculations
import pandas as pd #Data Analytics 
import matplotlib.pyplot as plt #Graphs and Charts
from IPython.display import clear_output


import tensorflow.compat.v2.feature_column as fc

import tensorflow as tf

dftrain = pd.read_csv('https://storage.googleapis.com/tf-datasets/titanic/train.csv')
dfeval = pd.read_csv('https://storage.googleapis.com/tf-datasets/titanic/eval.csv')

y_train = dftrain.pop("survived")
y_eval = dfeval.pop("survived")

dftrain.describe()

dftrain.shape

dftrain.age.hist(bins=10)

dftrain.sex.value_counts().plot(kind = "barh")

dftrain['class'].value_counts().plot(kind="barh")

pd.concat([dftrain,y_train],axis=1).groupby('sex').survived.mean().plot(kind="barh").set_xlabel('%survived')

CATEGORICAL_COLUMNS = ['sex','n_siblings_spouses','class','deck','embark_town','alone','parch']
NUMERICAL_COLUMNS = ['fare','age']


feature_column = []

for feature_name in CATEGORICAL_COLUMNS:
  vocabulary = dftrain[feature_name].unique() # gets a list of all unique values from given feature column
  feature_column.append(tf.feature_column.categorical_column_with_vocabulary_list(feature_name,vocabulary))

for feature_name in NUMERICAL_COLUMNS:
  feature_column.append(tf.feature_column.numeric_column(feature_name,dtype=tf.float32))

  print(feature_column)

def make_input_func(data_df,label_df,num_epoch = 10,shuffle =True,batch_size=10):
  def input():
    ds = tf.data.Dataset.from_tensor_slices((dict(data_df),label_df))
    if shuffle:
      ds = ds.shuffle(1000)
    ds = ds.batch(batch_size).repeat(num_epoch)
    return ds
  return input


train_input_fn = make_input_func(dftrain,y_train)
eval_input_fn = make_input_func(dfeval,y_eval,num_epoch = 1,shuffle = False)

linear_est = tf.estimator.LinearClassifier(feature_columns=feature_column)


linear_est.train(train_input_fn)
result = linear_est.evaluate(eval_input_fn)

clear_output()
print(result['accuracy'])